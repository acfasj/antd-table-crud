{"version":3,"sources":["service.ts","utils.ts","search-form.tsx","post-form.tsx","batch-update-posts-status-form.tsx","App.tsx","use-table-list-query.tsx","use-state-sync-to-url.tsx","serviceWorker.ts","index.tsx"],"names":["PostStatus","randomInt","min","max","Math","floor","random","delay","timeout","Promise","resolve","setTimeout","allPosts","Array","fill","map","_","index","id","title","content","slice","status","order","createdAt","Date","now","updatedAt","log","msg","args","console","logRequest","logResponse","getPosts","a","dto","page","pageSize","end","start","filteredList","concat","filter","item","includes","sort","b","ret","list","pagination","total","length","deletePost","createPost","unshift","updatePost","JSON","parse","stringify","batchUpdatePostsStatus","ids","validIntOrUndefined","value","num","Number","parseInt","isNaN","undefined","clamp","SearchForm","props","onSubmit","onReset","defaultQuery","Form","useForm","form","React","useEffect","setFieldsValue","layout","onFinish","Item","name","label","placeholder","maxLength","htmlType","type","onClick","resetFields","PostForm","visible","onCancel","onCreate","onUpdate","loading","record","Draft","forceRender","onOk","validateFields","then","values","okButtonProps","labelCol","span","wrapperCol","rules","required","message","TextArea","Group","Published","BatchUpdatePostsStatusForm","records","initialValue","getDefaultQuery","urlSearchParams","qs","window","location","search","ignoreQueryPrefix","orderNum","App","apiPagination","useState","api","query","setQuery","data","setData","setLoading","isCurrent","res","finally","useTableListQuery","selectedRecord","setSelectedRecord","selectedRows","setSelectedRows","modalActionType","setModalActionType","modalActionLoading","setModalActionLoading","handleModalCancel","modalActionFactory","options","successMessage","errorMessage","success","prev","error","columns","dataIndex","filters","text","filterMultiple","filteredValue","toString","sorter","sortOrder","0","1","render","style","cursor","color","onSuccess","Modal","confirm","handleDelete","prevPage","state","optionsRef","useRef","protocol","host","pathname","newurl","current","history","replaceState","useStateSyncToUrl","margin","disabled","rowKey","dataSource","showTotal","onChange","isArray","field","ascend","descend","rowSelection","selectedRowKeys","rows","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.3947d70c.chunk.js","sourcesContent":["/** 文章 */\nexport interface Post {\n  /** 主键 */\n  id: number\n  /** 标题 */\n  title: string\n  /** 内容 */\n  content: string\n  /** 状态 */\n  status: PostStatus\n  /** 排序字段 */\n  order: number\n  /** 创建时间, 时间戳 */\n  createdAt: number\n  /** 更新时间,时间戳 */\n  updatedAt: number\n}\n/** 文章状态 */\nexport enum PostStatus {\n  /** 草稿 */\n  Draft = 0,\n  /** 已发布 */\n  Published = 1,\n}\n/** 后端接口 */\nexport interface API<Response = unknown> {\n  (...args: any[]): Promise<Response>\n}\n\nfunction randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\nfunction delay(timeout?: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout ? timeout : randomInt(100, 1200))\n  })\n}\nfunction ceateMockPosts(): Post[] {\n  const len = 200\n  return new Array(len).fill(0).map((_, index) => ({\n    id: len - index,\n    title: `post - ${len - index}`,\n    content: 'abcdefghijklmnopqrstuvwxyz'.slice(\n      randomInt(0, 8),\n      randomInt(14, 25)\n    ),\n    status: randomInt(0, 1) as PostStatus,\n    order: randomInt(1, 20),\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  }))\n}\nlet allPosts = ceateMockPosts()\nexport interface GetPostsDto {\n  /** @default 1 */\n  page?: number\n  /** @default 20 */\n  pageSize?: number\n  /** 0升序 1降序 */\n  order?: 0 | 1\n  status?: PostStatus\n  title?: string\n}\nexport interface APIPagination {\n  page: number\n  total: number\n  pageSize: number\n}\nexport interface TableListResponse<T = unknown> {\n  list: T[]\n  pagination: APIPagination\n}\nfunction log(msg: string, ...args: any[]) {\n  console.log(`%c ${msg}`, 'background: #222; color: #bada55', ...args)\n}\nfunction logRequest(...args: any[]) {\n  log('=================== Request => ', ...args)\n}\nfunction logResponse(...args: any[]) {\n  log('=================== Response => ', ...args)\n}\n\nexport async function getPosts(\n  dto: GetPostsDto = {}\n): Promise<TableListResponse<Post>> {\n  const { page = 1, pageSize = 20, title, status, order } = dto\n  logRequest('getPosts', dto)\n  await delay()\n  const start = (page - 1) * pageSize\n  const end = start + pageSize\n  let filteredList = allPosts.concat()\n  if (title) {\n    filteredList = filteredList.filter((item) => item.title.includes(title))\n  }\n  if (status || status === 0) {\n    filteredList = filteredList.filter((item) => item.status === status)\n  }\n  if (order || order === 0) {\n    filteredList.sort((a, b) =>\n      order === 0 ? a.order - b.order : b.order - a.order\n    )\n  }\n  const ret = {\n    list: filteredList.slice(start, end),\n    pagination: {\n      total: filteredList.length,\n      page,\n      pageSize,\n    },\n  }\n  logResponse('getPosts', ret)\n  return ret\n}\n\nexport async function getPostById(id: number) {\n  await delay()\n  return allPosts.find((item) => item.id === id)\n}\n\nexport async function deletePost(id: number) {\n  logRequest('deletePost', id)\n  await delay()\n  allPosts = allPosts.filter((item) => item.id !== id)\n  logResponse('deletePost')\n}\n\nexport type CreatePostDto = Omit<Post, 'id' | 'createdAt' | 'updatedAt'>\nexport async function createPost(dto: CreatePostDto) {\n  logResponse('createPost', dto)\n  await delay()\n  const id = allPosts[0].id + 1\n  allPosts.unshift({ ...dto, id, createdAt: Date.now(), updatedAt: Date.now() })\n  logResponse('createPost', allPosts)\n  return { id }\n}\n\nexport type UpdatePostDto = Partial<Post> & { id: number }\nexport async function updatePost(dto: UpdatePostDto) {\n  logRequest('updatePost', dto)\n  await delay()\n  allPosts = allPosts.map((item) => {\n    if (item.id === dto.id) {\n      return {\n        ...item,\n        // 过滤掉undefined\n        ...JSON.parse(JSON.stringify(dto)),\n      }\n    }\n    return item\n  })\n  logResponse('updatePost')\n}\n\nexport type BatchUpdatePostsStatusDto = {\n  ids: number[]\n  status: PostStatus\n  remark: string\n}\nexport async function batchUpdatePostsStatus(dto: BatchUpdatePostsStatusDto) {\n  logRequest('batchUpdatePost', dto)\n  await delay()\n  const { ids, status } = dto\n  allPosts = allPosts.map((item) => {\n    if (ids.includes(item.id)) {\n      return {\n        ...item,\n        status,\n      }\n    }\n    return item\n  })\n  logResponse('batchUpdatePost')\n}\n","import { APIPagination } from './service'\n\nexport function antdPaginationAdapter(apiPagination: APIPagination) {\n  return {\n    current: apiPagination.page,\n    total: apiPagination.total,\n    pageSize: apiPagination.pageSize,\n    showTotal: () => {\n      return `每页${apiPagination.pageSize}条数据，共${apiPagination.total}条`\n    },\n  }\n}\n\nexport function validIntOrUndefined(value: any) {\n  const num = Number.parseInt(value, 10)\n  return !Number.isNaN(num) ? num : undefined\n}\n\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n","import React from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { GetPostsDto } from './service'\n\ninterface FormValues {\n  title?: string\n}\nexport function SearchForm(props: {\n  onSubmit: (values: FormValues) => any\n  onReset: (values: FormValues) => any\n  defaultQuery?: GetPostsDto\n}) {\n  const { onSubmit, onReset, defaultQuery } = props\n  const [form] = Form.useForm<FormValues>()\n  const handleReset = () => {\n    form.resetFields()\n    onReset({ title: undefined })\n  }\n  React.useEffect(() => {\n    if (!defaultQuery) {\n      return\n    }\n    const { title } = defaultQuery\n    if (title) {\n      form.setFieldsValue({ title })\n    }\n  }, [form, defaultQuery])\n  return (\n    <Form form={form} layout='inline' onFinish={onSubmit}>\n      <Form.Item name='title' label='标题'>\n        <Input placeholder='文章标题' maxLength={10} />\n      </Form.Item>\n      <Button htmlType='submit' type='primary'>\n        搜索\n      </Button>\n      <Button htmlType='button' onClick={handleReset}>\n        重置\n      </Button>\n    </Form>\n  )\n}\n","import React from 'react'\nimport { Form, Input, InputNumber, Modal, Radio } from 'antd'\nimport { CreatePostDto, Post, PostStatus, UpdatePostDto } from './service'\n\ninterface FormValues {\n  title: string\n  content: string\n  status: PostStatus\n  order: number\n}\nexport function PostForm(props: {\n  visible: boolean\n  title: string\n  loading: boolean\n  onCancel: () => void\n  onCreate?: (dto: CreatePostDto) => void\n  onUpdate?: (dto: UpdatePostDto) => void\n  record?: Post\n}) {\n  const {\n    visible,\n    onCancel,\n    onCreate,\n    onUpdate,\n    loading,\n    record,\n    title,\n  } = props\n  const [form] = Form.useForm<FormValues>()\n  const handleSubmit = () => {\n    form.validateFields().then((values) => {\n      if (record) {\n        onUpdate &&\n          onUpdate({\n            ...values,\n            id: record.id,\n          } as UpdatePostDto)\n      } else {\n        onCreate && onCreate(values as CreatePostDto)\n      }\n    })\n  }\n\n  // 初始化表单\n  React.useEffect(() => {\n    if (!visible) {\n      return\n    }\n    form.setFieldsValue({\n      title: record?.title,\n      content: record?.content,\n      status: record ? record.status : PostStatus.Draft,\n      order: record?.order || 1,\n    })\n  }, [record, form, visible])\n\n  return (\n    <Modal\n      // @see https://ant.design/components/form-cn/#FAQ\n      forceRender\n      title={title}\n      visible={visible}\n      onCancel={onCancel}\n      onOk={handleSubmit}\n      okButtonProps={{ loading }}\n    >\n      <Form form={form} labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\n        <Form.Item\n          name='title'\n          label='title'\n          rules={[\n            {\n              required: true,\n              message: 'title is required',\n            },\n          ]}\n        >\n          <Input></Input>\n        </Form.Item>\n        <Form.Item\n          name='content'\n          label='content'\n          rules={[\n            {\n              required: true,\n              message: 'content is required',\n            },\n          ]}\n        >\n          <Input.TextArea></Input.TextArea>\n        </Form.Item>\n        <Form.Item name='status' label='status' required>\n          <Radio.Group>\n            <Radio value={PostStatus.Draft}>draft</Radio>\n            <Radio value={PostStatus.Published}>published</Radio>\n          </Radio.Group>\n        </Form.Item>\n        <Form.Item\n          name='order'\n          label='order'\n          rules={[\n            {\n              required: true,\n              message: 'order is required',\n            },\n          ]}\n        >\n          <InputNumber min={1}></InputNumber>\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { Form, Input, Modal, Radio } from 'antd'\nimport { BatchUpdatePostsStatusDto, Post, PostStatus } from './service'\n\ninterface FormValues {\n  status: PostStatus\n  remark: string\n}\nexport function BatchUpdatePostsStatusForm(props: {\n  visible: boolean\n  loading: boolean\n  records: Post[]\n  onCancel: () => void\n  onSubmit: (dto: BatchUpdatePostsStatusDto) => Promise<void>\n}) {\n  const { visible, onCancel, onSubmit, loading, records } = props\n  const [form] = Form.useForm<FormValues>()\n  const handleSubmit = () => {\n    form.validateFields().then(async (values) => {\n      await onSubmit({\n        ...values,\n        ids: records.map((item) => item.id),\n      } as BatchUpdatePostsStatusDto)\n    })\n  }\n  // 重置表单\n  React.useEffect(() => {\n    if (!visible) {\n      return\n    }\n    form.resetFields()\n  }, [visible, form])\n\n  return (\n    <Modal\n      // @see https://ant.design/components/form-cn/#FAQ\n      forceRender\n      title='批量更新文章状态'\n      visible={visible}\n      onCancel={onCancel}\n      onOk={handleSubmit}\n      okButtonProps={{ loading }}\n    >\n      <Form form={form} labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}>\n        <Form.Item\n          name='remark'\n          label='remark'\n          rules={[\n            {\n              required: true,\n              message: 'remark is required',\n            },\n          ]}\n        >\n          <Input.TextArea placeholder='填写备注'></Input.TextArea>\n        </Form.Item>\n        <Form.Item\n          name='status'\n          label='status'\n          required\n          initialValue={PostStatus.Draft}\n        >\n          <Radio.Group>\n            <Radio value={PostStatus.Draft}>draft 0</Radio>\n            <Radio value={PostStatus.Published}>published 1</Radio>\n          </Radio.Group>\n        </Form.Item>\n      </Form>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { Button, message, Modal, Space, Table } from 'antd'\nimport { ColumnProps } from 'antd/lib/table'\nimport qs from 'qs'\nimport './App.css'\nimport {\n  Post,\n  getPosts,\n  GetPostsDto,\n  createPost,\n  updatePost,\n  deletePost,\n  batchUpdatePostsStatus,\n} from './service'\nimport { antdPaginationAdapter, clamp, validIntOrUndefined } from './utils'\nimport { SearchForm } from './search-form'\nimport { PostForm } from './post-form'\nimport { BatchUpdatePostsStatusForm } from './batch-update-posts-status-form'\nimport { useTableListQuery } from './use-table-list-query'\nimport { useStateSyncToUrl } from './use-state-sync-to-url'\n\nfunction getDefaultQuery() {\n  // 先不考虑服务端渲染\n  const urlSearchParams = qs.parse(window.location.search, {\n    ignoreQueryPrefix: true,\n  })\n  const { page, pageSize, title, status, order } = urlSearchParams\n  const dto: GetPostsDto = {}\n  if (typeof page === 'string') {\n    dto.page = validIntOrUndefined(page) || 1\n  }\n  if (typeof pageSize === 'string') {\n    dto.pageSize = validIntOrUndefined(pageSize) || 20\n  }\n  if (typeof title === 'string') {\n    dto.title = title\n  }\n  if (typeof status === 'string') {\n    dto.status = validIntOrUndefined(status)\n  }\n  if (typeof order === 'string') {\n    const orderNum = validIntOrUndefined(order)\n    dto.order = orderNum ? (clamp(orderNum, 0, 1) as 0 | 1) : undefined\n  }\n  return dto\n}\n\nfunction handleDelete(record: Post, onSuccess: () => void) {\n  Modal.confirm({\n    title: 'Delete Post',\n    content: <p>确定删除 {record.title} 吗?</p>,\n    onOk: async () => {\n      try {\n        await deletePost(record.id)\n        message.success('删除成功')\n        onSuccess()\n      } catch (e) {\n        message.error('删除失败')\n      }\n    },\n  })\n}\ntype ModalActionType = '' | 'create' | 'update' | 'batchUpdateStatus'\ntype ModalActionFactory = <\n  API extends (...args: any[]) => Promise<unknown>\n>(options: {\n  api: API\n  successMessage?: string\n  errorMessage?: string\n}) => (...args: Parameters<API>) => Promise<void>\nfunction App() {\n  const [defaultQuery] = React.useState<GetPostsDto>(getDefaultQuery)\n  const { data, query, setQuery, loading } = useTableListQuery(\n    getPosts,\n    defaultQuery\n  )\n  const [selectedRecord, setSelectedRecord] = React.useState<Post>()\n  const [selectedRows, setSelectedRows] = React.useState<Post[]>([])\n  const [modalActionType, setModalActionType] = React.useState<ModalActionType>(\n    ''\n  )\n  const [modalActionLoading, setModalActionLoading] = React.useState(false)\n  const clean = () => {\n    setSelectedRecord(undefined)\n    setSelectedRows([])\n  }\n  const handleModalCancel = () => {\n    setModalActionType('')\n    clean()\n  }\n  const modalActionFactory: ModalActionFactory = (options) => {\n    const {\n      api,\n      successMessage = '操作成功',\n      errorMessage = '操作失败',\n    } = options\n    return async (...args: any[]) => {\n      setModalActionLoading(true)\n      try {\n        await api(...args)\n        message.success(successMessage)\n        // 刷新列表\n        setQuery((prev) => ({\n          ...prev,\n        }))\n        handleModalCancel()\n      } catch (e) {\n        message.error(errorMessage)\n      } finally {\n        setModalActionLoading(false)\n      }\n    }\n  }\n\n  const columns: ColumnProps<Post>[] = [\n    { dataIndex: 'id', title: 'id' },\n    { dataIndex: 'title', title: 'title' },\n    { dataIndex: 'content', title: 'content' },\n    {\n      dataIndex: 'status',\n      title: 'status',\n      filters: [\n        { text: '0', value: 0 },\n        { text: '1', value: 1 },\n      ],\n      filterMultiple: false,\n      filteredValue:\n        query.status === undefined ? undefined : [query.status.toString()],\n    },\n    {\n      dataIndex: 'order',\n      title: 'order',\n      sorter: true,\n      sortOrder:\n        query.order === undefined\n          ? undefined\n          : ({ 0: 'ascend', 1: 'descend' } as const)[query.order],\n    },\n    { dataIndex: 'createdAt', title: 'createdAt', sorter: true },\n    { dataIndex: 'updatedAt', title: 'updatedAt' },\n    {\n      title: '操作',\n      render: (_, record) => (\n        <Space>\n          <span\n            style={{ cursor: 'pointer' }}\n            onClick={() => {\n              setSelectedRecord(record)\n              setModalActionType('update')\n            }}\n          >\n            编辑\n          </span>\n          <span\n            style={{ color: 'red', cursor: 'pointer' }}\n            onClick={() =>\n              handleDelete(record, () =>\n                setQuery((prev) => {\n                  const prevPage = prev.page || 1\n                  return {\n                    ...prev,\n                    page:\n                      data.list.length === 1\n                        ? clamp(prevPage - 1, 1, prevPage)\n                        : prevPage,\n                  }\n                })\n              )\n            }\n          >\n            删除\n          </span>\n        </Space>\n      ),\n    },\n  ]\n\n  useStateSyncToUrl(query)\n\n  return (\n    <div>\n      <h1>antd table crud</h1>\n      <SearchForm\n        defaultQuery={defaultQuery}\n        onSubmit={(values) =>\n          setQuery((prev) => ({\n            ...prev,\n            ...values,\n            page: 1, // 重置分页\n          }))\n        }\n        onReset={(values) =>\n          setQuery((prev) => ({\n            ...prev,\n            ...values,\n            page: 1, // 重置分页\n          }))\n        }\n      />\n      <div style={{ margin: '15px 0' }}>\n        <Space>\n          <Button type='primary' onClick={() => setModalActionType('create')}>\n            Create\n          </Button>\n\n          <Button\n            type='primary'\n            disabled={selectedRows.length <= 0}\n            onClick={() => {\n              setModalActionType('batchUpdateStatus')\n            }}\n          >\n            批量更新文章状态\n          </Button>\n        </Space>\n      </div>\n      <Table\n        rowKey='id'\n        dataSource={data.list}\n        columns={columns}\n        loading={loading}\n        pagination={{ ...antdPaginationAdapter(data.pagination) }}\n        onChange={(pagination, filters, sorter) => {\n          setQuery((prev) => ({\n            ...prev,\n            page: pagination.current || 1,\n            pageSize: pagination.pageSize || 20,\n            status:\n              filters.status && filters.status.length > 0\n                ? Number(filters.status[0])\n                : undefined,\n            order:\n              !Array.isArray(sorter) &&\n              !!sorter.order &&\n              sorter.field === 'order'\n                ? ({ ascend: 0, descend: 1 } as const)[sorter.order]\n                : undefined,\n          }))\n        }}\n        rowSelection={{\n          selectedRowKeys: selectedRows.map((item) => item.id),\n          onChange: (_, rows) => setSelectedRows(rows),\n        }}\n      ></Table>\n      <PostForm\n        title='Create Post'\n        visible={modalActionType === 'create'}\n        onCreate={modalActionFactory({\n          api: createPost,\n          successMessage: '创建成功',\n          errorMessage: '创建失败',\n        })}\n        onCancel={handleModalCancel}\n        loading={modalActionLoading}\n      />\n      <PostForm\n        title='Update Post'\n        record={selectedRecord}\n        visible={modalActionType === 'update'}\n        onUpdate={modalActionFactory({\n          api: updatePost,\n          successMessage: '编辑成功',\n          errorMessage: '编辑失败',\n        })}\n        onCancel={handleModalCancel}\n        loading={modalActionLoading}\n      />\n      <BatchUpdatePostsStatusForm\n        visible={modalActionType === 'batchUpdateStatus'}\n        records={selectedRows}\n        loading={modalActionLoading}\n        onCancel={handleModalCancel}\n        onSubmit={modalActionFactory({\n          api: batchUpdatePostsStatus,\n          successMessage: '批量编辑成功',\n          errorMessage: '批量编辑失败',\n        })}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport { TableListResponse } from './service'\n\nexport function useTableListQuery<\n  Query extends { page?: number; pageSize?: number },\n  Entity\n>(\n  api: (query: Query) => Promise<TableListResponse<Entity>>,\n  defaultQuery: Query\n) {\n  const [query, setQuery] = React.useState<Query>(defaultQuery)\n  const [data, setData] = React.useState<TableListResponse<Entity>>({\n    list: [],\n    pagination: {\n      page: 1,\n      pageSize: 20,\n      total: 0,\n    },\n  })\n  const [loading, setLoading] = React.useState(false)\n\n  React.useEffect(() => {\n    let isCurrent = true\n    setLoading(true)\n    api(query)\n      .then((res) => isCurrent && setData(res))\n      .finally(() => isCurrent && setLoading(false))\n    return () => {\n      // 防止组件已经卸载的时候, 还会对已经卸载的组件setState\n      isCurrent = false\n    }\n    // query每次变化的时候都会重新调用接口\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query])\n\n  return {\n    query,\n    setQuery,\n    data,\n    loading,\n  }\n}\n","import React from 'react'\nimport qs from 'qs'\n\nexport function useStateSyncToUrl<T>(state: T, options?: qs.IStringifyOptions) {\n  const optionsRef = React.useRef(options)\n  React.useEffect(() => {\n    const { protocol, host, pathname } = window.location\n    const newurl = `${protocol}//${host}${pathname}?${qs.stringify(\n      state,\n      optionsRef.current\n    )}`\n    window.history.replaceState(null, '', newurl)\n    // state每次变化的时候同步参数到url\n  }, [state])\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}